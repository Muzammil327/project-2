'use client'
import React, { useState } from 'react'
import { Navbar2 } from '@/components/layout/Navbar'
import { Typewriter } from 'react-simple-typewriter'

export const quizData = [
  {
    id: 1,
    title: 'How often do you feel stressed or anxious?',
    description:
      'Memory lapses can sometimes be caused by stress, fatigue, or lack of focus.',
    options: [
      { emoji: '😊', text: 'Never' },
      { emoji: '😊', text: 'Rarely' },
      { emoji: '😊', text: 'Often' },
      { emoji: undefined, text: 'All the time' }
    ],
    correctOption: ['Often', 'All the time'] // Multiple correct answers
  },
  {
    id: 2,
    title: 'Do you enjoy solving problems?',
    description:
      'Solving problems often engages critical thinking and boosts mental skills.',
    options: [
      { emoji: '👍', text: 'Yes' },
      { emoji: undefined, text: 'No' }
    ],
    correctOption: 'Yes' // Single correct answer
  }
]

const QuizComponent = () => {
  const [selectedOptions, setSelectedOptions] = useState<number[]>([])
  const [isCorrect, setIsCorrect] = useState<boolean | null>(null)
  const [currentStep, setCurrentStep] = useState(0)

  const calculateProgress = () => {
    return Math.round(((currentStep + 1) / quizData.length) * 100)
  }

  const handleOptionClick = (index: number) => {
    const correctAnswers = Array.isArray(quizData[currentStep].correctOption)
      ? quizData[currentStep].correctOption
      : [quizData[currentStep].correctOption]

    const selectedText = quizData[currentStep].options[index]?.text
    const isAnswerCorrect = correctAnswers.includes(selectedText)
    setIsCorrect(isAnswerCorrect)

    if (isAnswerCorrect) {
      setTimeout(() => {
        moveToNextQuestion()
      }, 2000)
    }
  }

  const handleCheckboxChange = (index: number) => {
    setSelectedOptions((prev) =>
      prev.includes(index) ? prev.filter((i) => i !== index) : [...prev, index]
    )
  }

  const handleSubmitMultiple = () => {
    const correctAnswers = Array.isArray(quizData[currentStep].correctOption)
      ? quizData[currentStep].correctOption
      : []

    const selectedTexts = selectedOptions.map(
      (index) => quizData[currentStep].options[index]?.text
    )

    const isAnswerCorrect =
      correctAnswers.length === selectedTexts.length &&
      correctAnswers.every((answer) => selectedTexts.includes(answer))

    setIsCorrect(isAnswerCorrect)

    if (isAnswerCorrect) {
      setTimeout(() => {
        moveToNextQuestion()
      }, 2000)
    }
  }

  const moveToNextQuestion = () => {
    if (currentStep < quizData.length - 1) {
      setCurrentStep(currentStep + 1)
      setSelectedOptions([])
      setIsCorrect(null)
    } else {
      alert('Quiz Complete!')
    }
  }

  const isMultiple = Array.isArray(quizData[currentStep].correctOption)

  return (
    <div className='!bg-[#f6f7f9] main font1'>
      <main className='wrapper'>
        <Navbar2 progressValue={calculateProgress()} bg='!bg-[#f6f7f9]' />
        <div>
          <h2 className='h21 font2 mb-8 text-center mt-10'>
            {quizData[currentStep].title}
          </h2>

          {isCorrect === false && (
            <div className='description mb-3'>
              <span className='text-base'>🤔</span>
              <div>
                <h3
                  style={{
                    fontSize: '.875rem',
                    fontWeight: '700',
                    letterSpacing: '-.025em'
                  }}
                >
                  <span>You might wonder why...</span>
                </h3>

                <article
                  style={{
                    fontSize: '.75rem',
                    fontWeight: '400',
                    letterSpacing: '-.025em'
                  }}
                >
                  <Typewriter
                    words={[quizData[currentStep].description]}
                    cursor
                    cursorStyle='|'
                    typeSpeed={70}
                    deleteSpeed={50}
                    delaySpeed={1000}
                  />
                </article>
              </div>
            </div>
          )}

          {quizData[currentStep].options.map((option, index) => (
            <label
              key={index}
              className={`block mb-4 ${
                selectedOptions.includes(index) ? 'border-4 !border-black' : ''
              }`}
            >
              {isMultiple ? (
                <>
                  <input
                    type='checkbox'
                    checked={selectedOptions.includes(index)}
                    onChange={() => handleCheckboxChange(index)}
                    className='mr-2'
                  />
                  {option.emoji && <span className='mr-2'>{option.emoji}</span>}
                  {option.text}
                </>
              ) : (
                <button
                  className={`btn3 ${
                    selectedOptions.includes(index)
                      ? 'border-4 !border-black'
                      : 'border border-gray-300'
                  }`}
                  onClick={() => handleOptionClick(index)}
                  disabled={isCorrect !== null}
                >
                  {option.emoji && <span className='mr-2'>{option.emoji}</span>}
                  {option.text}
                </button>
              )}
            </label>
          ))}

          {isMultiple && isCorrect === null && (
            <button
              className='fixed bottom-4 left-0 right-0 z-50 mx-auto w-full max-w-[23rem] btn2'
              onClick={handleSubmitMultiple}
            >
              Submit
            </button>
          )}

          {isCorrect === false && isMultiple && (
            <button
              className='fixed bottom-4 left-0 right-0 z-50 mx-auto w-full max-w-[23rem] btn2'
              onClick={moveToNextQuestion}
            >
              Continue
            </button>
          )}
        </div>
      </main>
    </div>
  )
}

export default QuizComponent
